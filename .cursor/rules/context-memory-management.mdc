---
alwaysApply: true
description: Agent上下文记忆\任务执行规范
globs:
---

# 上下文记忆管理规则

## 目的

为了保持项目信息的一致性、准确性和可追踪性，同时确保所有团队成员都能获取到最新、最相关的项目信息，特制定本规则。

## 具体要求

### 1. 语言使用

- 所有与用户的交流、文档编写和记忆存储都应使用中文
- 回答问题、提供建议和解释代码时使用中文
- 确保术语翻译准确，必要时可保留英文原文

**示例**：当解释Vue组件生命周期时，应使用"在组件挂载完成后(mounted)"这样的描述方式。

### 2. 记忆更新机制

- 当项目有重要进展时（完成功能、修复bug、更改设计等），立即更新memory或mem0
- 使用update_memory工具创建或更新记忆
- 使用mcp_mem0-mcp_add_coding_preference添加编码偏好
- 在Notion中创建或更新页面记录详细信息
- 记录应包含：完成的工作、实现方法、遇到的问题及解决方案、后续影响等

**示例**：完成OAuth2认证流程实现后，应调用update_memory更新项目状态，记录"已实现基于Cookie的OAuth2认证流程，包含回调处理和调试工具"，并在Notion中记录详细实现方法。

### 3. 项目进度管理

- 使用todo_write工具创建和更新任务列表
- 定期回顾项目状态，更新进度，更新进度时最好在文档（notion）标注日期
- 规划下一步工作，设置优先级
- 当完成重要里程碑时，更新项目状态记录
- 记录决策理由和过程，确保项目历史可追踪

**示例**：完成UI设计阶段后，使用todo_write更新任务状态，并创建下一阶段的任务列表，如"实现设备管理页面"、"添加用户通知功能"等。

### 4. 复杂问题处理

- 遇到以下情况时使用mcp_sequential-thinking_sequentialthinking工具：
  - 多步骤问题
  - 需要深入分析的问题
  - 需要综合多种信息的问题
  - 决策过程需要记录的问题
- 通过系统化思考，确保考虑全面并得出合理结论

**示例**：当需要设计状态管理方案时，使用sequentialthinking分析不同方案的优缺点，考虑项目规模、团队熟悉度、性能要求等因素，最终选择最合适的方案。

### 5. 文档获取

- 处理框架或代码相关问题时，使用Context7工具获取最新文档
- 先使用mcp_context7_resolve-library-id获取库ID
- 再使用mcp_context7_get-library-docs获取详细文档
- 确保建议和解决方案基于最新的技术信息

**示例**：解答Vue 3组合式API相关问题时，先获取Vue.js的最新文档，再基于官方最新指南提供解答。

## 其他补充

### 记忆一致性

- 发现记忆中存在冲突信息时，立即核实并更新
- 当用户提供的信息与现有记忆冲突时，以用户提供的最新信息为准
- 定期检查记忆的准确性和时效性

### 定期回顾

- 在每个工作会话开始时，回顾项目状态和记忆
- 在每个工作会话结束前，检查是否有需要更新的记忆或记录
- 定期整理和归类记忆，确保信息结构清晰

### 沟通透明

- 在进行重要决策或更改时，清晰记录决策理由和过程
- 当不确定时，主动提问澄清，避免基于不完整信息做出判断
- 提供建议时，说明建议的依据和可能的影响

## 实施指南

1. 每次工作会话开始前，查看最新的项目状态和任务列表
2. 工作过程中，随时记录重要发现和决策
3. 完成重要工作后，立即更新相关记忆和文档
4. 遇到复杂问题时，先使用sequentialthinking进行分析
5. 工作会话结束前，检查是否有未更新的记忆或记录
